/*
* generated by Xtext
*/
package org.uqbar.hoope.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.uqbar.hoope.services.HOOPLGrammarAccess;

public class HOOPLParser extends AbstractContentAssistParser {
	
	@Inject
	private HOOPLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser createParser() {
		org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser result = new org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgramAccess().getObjectsAlternatives_0(), "rule__Program__ObjectsAlternatives_0");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getExpresionAccess().getAlternatives(), "rule__Expresion__Alternatives");
					put(grammarAccess.getTerminalAccess().getAlternatives(), "rule__Terminal__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getTypoAccess().getAlternatives(), "rule__Typo__Alternatives");
					put(grammarAccess.getObjectDefinitionAccess().getGroup(), "rule__ObjectDefinition__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_3(), "rule__Property__Group_3__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getExpresionAccess().getGroup_2(), "rule__Expresion__Group_2__0");
					put(grammarAccess.getExpresionAccess().getGroup_2_1(), "rule__Expresion__Group_2_1__0");
					put(grammarAccess.getIfExpresionAccess().getGroup(), "rule__IfExpresion__Group__0");
					put(grammarAccess.getIfExpresionAccess().getGroup_4(), "rule__IfExpresion__Group_4__0");
					put(grammarAccess.getWhileExpresionAccess().getGroup(), "rule__WhileExpresion__Group__0");
					put(grammarAccess.getTerminalAccess().getGroup_3(), "rule__Terminal__Group_3__0");
					put(grammarAccess.getProgramAccess().getObjectsAssignment(), "rule__Program__ObjectsAssignment");
					put(grammarAccess.getObjectDefinitionAccess().getNameAssignment_1(), "rule__ObjectDefinition__NameAssignment_1");
					put(grammarAccess.getObjectDefinitionAccess().getFeaturesAssignment_3(), "rule__ObjectDefinition__FeaturesAssignment_3");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
					put(grammarAccess.getPropertyAccess().getInitialAssignment_3_1(), "rule__Property__InitialAssignment_3_1");
					put(grammarAccess.getMessageAccess().getNameAssignment_1(), "rule__Message__NameAssignment_1");
					put(grammarAccess.getMessageAccess().getSentencesAssignment_3(), "rule__Message__SentencesAssignment_3");
					put(grammarAccess.getIfExpresionAccess().getConditionAssignment_1(), "rule__IfExpresion__ConditionAssignment_1");
					put(grammarAccess.getIfExpresionAccess().getThenAssignment_3(), "rule__IfExpresion__ThenAssignment_3");
					put(grammarAccess.getIfExpresionAccess().getElseAssignment_4_1(), "rule__IfExpresion__ElseAssignment_4_1");
					put(grammarAccess.getWhileExpresionAccess().getConditionAssignment_1(), "rule__WhileExpresion__ConditionAssignment_1");
					put(grammarAccess.getWhileExpresionAccess().getSentencesAssignment_3(), "rule__WhileExpresion__SentencesAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser typedParser = (org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HOOPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HOOPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
