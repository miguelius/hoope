/*
* generated by Xtext
*/
package org.uqbar.hoope.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.uqbar.hoope.services.HOOPLGrammarAccess;

public class HOOPLParser extends AbstractContentAssistParser {
	
	@Inject
	private HOOPLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser createParser() {
		org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser result = new org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives_1_1(), "rule__Property__Alternatives_1_1");
					put(grammarAccess.getOperationAccess().getSentenceAlternatives_3_0(), "rule__Operation__SentenceAlternatives_3_0");
					put(grammarAccess.getAnnotationAccess().getAlternatives_2_1(), "rule__Annotation__Alternatives_2_1");
					put(grammarAccess.getMutatorAccess().getAlternatives_2(), "rule__Mutator__Alternatives_2");
					put(grammarAccess.getSendMessageAccess().getNameAlternatives_0_0(), "rule__SendMessage__NameAlternatives_0_0");
					put(grammarAccess.getSendMessageAccess().getMessageAlternatives_1_0(), "rule__SendMessage__MessageAlternatives_1_0");
					put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_1(), "rule__Property__Group_1__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup_2(), "rule__Annotation__Group_2__0");
					put(grammarAccess.getMutatorAccess().getGroup(), "rule__Mutator__Group__0");
					put(grammarAccess.getSendMessageAccess().getGroup(), "rule__SendMessage__Group__0");
					put(grammarAccess.getObjectAccess().getNameAssignment_1(), "rule__Object__NameAssignment_1");
					put(grammarAccess.getObjectAccess().getFeaturesAssignment_3(), "rule__Object__FeaturesAssignment_3");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getOperationAccess().getAnnotationsAssignment_0(), "rule__Operation__AnnotationsAssignment_0");
					put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
					put(grammarAccess.getOperationAccess().getSentenceAssignment_3(), "rule__Operation__SentenceAssignment_3");
					put(grammarAccess.getMutatorAccess().getNameAssignment_0(), "rule__Mutator__NameAssignment_0");
					put(grammarAccess.getSendMessageAccess().getNameAssignment_0(), "rule__SendMessage__NameAssignment_0");
					put(grammarAccess.getSendMessageAccess().getMessageAssignment_1(), "rule__SendMessage__MessageAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser typedParser = (org.uqbar.hoope.ui.contentassist.antlr.internal.InternalHOOPLParser) parser;
			typedParser.entryRuleHOOPL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HOOPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HOOPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
