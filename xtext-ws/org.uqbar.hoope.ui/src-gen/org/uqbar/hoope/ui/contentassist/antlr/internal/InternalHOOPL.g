/*
* generated by Xtext
*/
grammar InternalHOOPL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.uqbar.hoope.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.uqbar.hoope.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.uqbar.hoope.services.HOOPLGrammarAccess;

}

@parser::members {
 
 	private HOOPLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(HOOPLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleHOOPL
entryRuleHOOPL 
:
{ before(grammarAccess.getHOOPLRule()); }
	 ruleHOOPL
{ after(grammarAccess.getHOOPLRule()); } 
	 EOF 
;

// Rule HOOPL
ruleHOOPL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHOOPLAccess().getObjectParserRuleCall()); }
	ruleObject
{ after(grammarAccess.getHOOPLAccess().getObjectParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObject
entryRuleObject 
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectAccess().getGroup()); }
(rule__Object__Group__0)
{ after(grammarAccess.getObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
(rule__Feature__Alternatives)
{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMutator
entryRuleMutator 
:
{ before(grammarAccess.getMutatorRule()); }
	 ruleMutator
{ after(grammarAccess.getMutatorRule()); } 
	 EOF 
;

// Rule Mutator
ruleMutator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMutatorAccess().getGroup()); }
(rule__Mutator__Group__0)
{ after(grammarAccess.getMutatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSendMessage
entryRuleSendMessage 
:
{ before(grammarAccess.getSendMessageRule()); }
	 ruleSendMessage
{ after(grammarAccess.getSendMessageRule()); } 
	 EOF 
;

// Rule SendMessage
ruleSendMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSendMessageAccess().getGroup()); }
(rule__SendMessage__Group__0)
{ after(grammarAccess.getSendMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitive
entryRulePrimitive 
:
{ before(grammarAccess.getPrimitiveRule()); }
	 rulePrimitive
{ after(grammarAccess.getPrimitiveRule()); } 
	 EOF 
;

// Rule Primitive
rulePrimitive
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveAccess().getAlternatives()); }
(rule__Primitive__Alternatives)
{ after(grammarAccess.getPrimitiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Feature__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
	ruleProperty
{ after(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getOperationParserRuleCall_1()); }
	ruleOperation
{ after(grammarAccess.getFeatureAccess().getOperationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getINTTerminalRuleCall_1_1_0()); }
	RULE_INT
{ after(grammarAccess.getPropertyAccess().getINTTerminalRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getPropertyAccess().getSTRINGTerminalRuleCall_1_1_1()); }
	RULE_STRING
{ after(grammarAccess.getPropertyAccess().getSTRINGTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__SentenceAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getSentenceMutatorParserRuleCall_3_0_0()); }
	ruleMutator
{ after(grammarAccess.getOperationAccess().getSentenceMutatorParserRuleCall_3_0_0()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getSentenceSendMessageParserRuleCall_3_0_1()); }
	ruleSendMessage
{ after(grammarAccess.getOperationAccess().getSentenceSendMessageParserRuleCall_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getINTTerminalRuleCall_2_1_0()); }
	RULE_INT
{ after(grammarAccess.getAnnotationAccess().getINTTerminalRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getSTRINGTerminalRuleCall_2_1_1()); }
	RULE_STRING
{ after(grammarAccess.getAnnotationAccess().getSTRINGTerminalRuleCall_2_1_1()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_2_1_2()); }
	RULE_ID
{ after(grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getINTTerminalRuleCall_2_0()); }
	RULE_INT
{ after(grammarAccess.getMutatorAccess().getINTTerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getMutatorAccess().getSTRINGTerminalRuleCall_2_1()); }
	RULE_STRING
{ after(grammarAccess.getMutatorAccess().getSTRINGTerminalRuleCall_2_1()); }
)

    |(
{ before(grammarAccess.getMutatorAccess().getIDTerminalRuleCall_2_2()); }
	RULE_ID
{ after(grammarAccess.getMutatorAccess().getIDTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getSendMessageAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getSendMessageAccess().getNameSelfKeyword_0_0_1()); }

	'self' 

{ after(grammarAccess.getSendMessageAccess().getNameSelfKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__MessageAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getMessageIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getSendMessageAccess().getMessageIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getSendMessageAccess().getMessagePrimitiveParserRuleCall_1_0_1()); }
	rulePrimitive
{ after(grammarAccess.getSendMessageAccess().getMessagePrimitiveParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveAccess().getSubirKeyword_0()); }

	'subir' 

{ after(grammarAccess.getPrimitiveAccess().getSubirKeyword_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getBajarKeyword_1()); }

	'bajar' 

{ after(grammarAccess.getPrimitiveAccess().getBajarKeyword_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getDerechaKeyword_2()); }

	'derecha' 

{ after(grammarAccess.getPrimitiveAccess().getDerechaKeyword_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getIzquierdaKeyword_3()); }

	'izquierda' 

{ after(grammarAccess.getPrimitiveAccess().getIzquierdaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Object__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getObjectKeyword_0()); }

	'object' 

{ after(grammarAccess.getObjectAccess().getObjectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getNameAssignment_1()); }
(rule__Object__NameAssignment_1)
{ after(grammarAccess.getObjectAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__2__Impl
	rule__Object__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__3__Impl
	rule__Object__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getFeaturesAssignment_3()); }
(rule__Object__FeaturesAssignment_3)*
{ after(grammarAccess.getObjectAccess().getFeaturesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameAssignment_0()); }
(rule__Property__NameAssignment_0)
{ after(grammarAccess.getPropertyAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getGroup_1()); }
(rule__Property__Group_1__0)?
{ after(grammarAccess.getPropertyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Property__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group_1__0__Impl
	rule__Property__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getPropertyAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getAlternatives_1_1()); }
(rule__Property__Alternatives_1_1)
{ after(grammarAccess.getPropertyAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getAnnotationsAssignment_0()); }
(rule__Operation__AnnotationsAssignment_0)*
{ after(grammarAccess.getOperationAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_1()); }
(rule__Operation__NameAssignment_1)
{ after(grammarAccess.getOperationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getSentenceAssignment_3()); }
(rule__Operation__SentenceAssignment_3)*
{ after(grammarAccess.getOperationAccess().getSentenceAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives_2_1()); }
(rule__Annotation__Alternatives_2_1)
{ after(grammarAccess.getAnnotationAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Mutator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mutator__Group__0__Impl
	rule__Mutator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getNameAssignment_0()); }
(rule__Mutator__NameAssignment_0)
{ after(grammarAccess.getMutatorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mutator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mutator__Group__1__Impl
	rule__Mutator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMutatorAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mutator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mutator__Group__2__Impl
	rule__Mutator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getAlternatives_2()); }
(rule__Mutator__Alternatives_2)
{ after(grammarAccess.getMutatorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mutator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mutator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMutatorAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SendMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendMessage__Group__0__Impl
	rule__SendMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getNameAssignment_0()); }
(rule__SendMessage__NameAssignment_0)
{ after(grammarAccess.getSendMessageAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SendMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendMessage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getMessageAssignment_1()); }
(rule__SendMessage__MessageAssignment_1)
{ after(grammarAccess.getSendMessageAccess().getMessageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Object__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Object__FeaturesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); }
	ruleFeature{ after(grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getOperationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__SentenceAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getSentenceAlternatives_3_0()); }
(rule__Operation__SentenceAlternatives_3_0)
{ after(grammarAccess.getOperationAccess().getSentenceAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mutator__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMutatorAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getNameAlternatives_0_0()); }
(rule__SendMessage__NameAlternatives_0_0)
{ after(grammarAccess.getSendMessageAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendMessage__MessageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendMessageAccess().getMessageAlternatives_1_0()); }
(rule__SendMessage__MessageAlternatives_1_0)
{ after(grammarAccess.getSendMessageAccess().getMessageAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


