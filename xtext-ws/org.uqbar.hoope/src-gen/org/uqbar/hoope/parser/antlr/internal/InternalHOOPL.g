/*
* generated by Xtext
*/
grammar InternalHOOPL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.uqbar.hoope.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.uqbar.hoope.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.uqbar.hoope.services.HOOPLGrammarAccess;

}

@parser::members {

 	private HOOPLGrammarAccess grammarAccess;
 	
    public InternalHOOPLParser(TokenStream input, HOOPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "HOOPL";	
   	}
   	
   	@Override
   	protected HOOPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleHOOPL
entryRuleHOOPL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHOOPLRule()); }
	 iv_ruleHOOPL=ruleHOOPL 
	 { $current=$iv_ruleHOOPL.current; } 
	 EOF 
;

// Rule HOOPL
ruleHOOPL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getHOOPLAccess().getObjectParserRuleCall()); 
    }
    this_Object_0=ruleObject
    { 
        $current = $this_Object_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='object' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectAccess().getObjectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); 
    }
    this_Property_0=ruleProperty
    { 
        $current = $this_Property_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getOperationParserRuleCall_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getEqualsSignKeyword_1_0());
    }
(this_INT_2=RULE_INT
    { 
    newLeafNode(this_INT_2, grammarAccess.getPropertyAccess().getINTTerminalRuleCall_1_1_0()); 
    }

    |this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getPropertyAccess().getSTRINGTerminalRuleCall_1_1_1()); 
    }
))?)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getSentenceMutatorParserRuleCall_3_0_0()); 
	    }
		lv_sentence_3_1=ruleMutator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"sentence",
        		lv_sentence_3_1, 
        		"Mutator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getSentenceSendMessageParserRuleCall_3_0_1()); 
	    }
		lv_sentence_3_2=ruleSendMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"sentence",
        		lv_sentence_3_2, 
        		"SendMessage");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); } 
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current.getText(); }  
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); 
    }
(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getAnnotationAccess().getINTTerminalRuleCall_2_1_0()); 
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getAnnotationAccess().getSTRINGTerminalRuleCall_2_1_1()); 
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getAnnotationAccess().getIDTerminalRuleCall_2_1_2()); 
    }
)
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2()); 
    }
)?)
    ;





// Entry rule entryRuleMutator
entryRuleMutator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutatorRule()); }
	 iv_ruleMutator=ruleMutator 
	 { $current=$iv_ruleMutator.current; } 
	 EOF 
;

// Rule Mutator
ruleMutator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMutatorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMutatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMutatorAccess().getLeftParenthesisKeyword_1());
    }
(this_INT_2=RULE_INT
    { 
    newLeafNode(this_INT_2, grammarAccess.getMutatorAccess().getINTTerminalRuleCall_2_0()); 
    }

    |this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getMutatorAccess().getSTRINGTerminalRuleCall_2_1()); 
    }

    |this_ID_4=RULE_ID
    { 
    newLeafNode(this_ID_4, grammarAccess.getMutatorAccess().getIDTerminalRuleCall_2_2()); 
    }
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMutatorAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSendMessage
entryRuleSendMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSendMessageRule()); }
	 iv_ruleSendMessage=ruleSendMessage 
	 { $current=$iv_ruleSendMessage.current; } 
	 EOF 
;

// Rule SendMessage
ruleSendMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getSendMessageAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSendMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=	'self' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getSendMessageAccess().getNameSelfKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSendMessageRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

)

)
)(
(
(
		lv_message_1_1=RULE_ID
		{
			newLeafNode(lv_message_1_1, grammarAccess.getSendMessageAccess().getMessageIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSendMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"message",
        		lv_message_1_1, 
        		"ID");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getSendMessageAccess().getMessagePrimitiveParserRuleCall_1_0_1()); 
	    }
		lv_message_1_2=rulePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendMessageRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_1_2, 
        		"Primitive");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRulePrimitive
entryRulePrimitive returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); } 
	 iv_rulePrimitive=rulePrimitive 
	 { $current=$iv_rulePrimitive.current.getText(); }  
	 EOF 
;

// Rule Primitive
rulePrimitive returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='subir' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getSubirKeyword_0()); 
    }

    |
	kw='bajar' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getBajarKeyword_1()); 
    }

    |
	kw='derecha' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getDerechaKeyword_2()); 
    }

    |
	kw='izquierda' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getIzquierdaKeyword_3()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


