/*
* generated by Xtext
*/
grammar InternalHOOPL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.uqbar.hoope.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.uqbar.hoope.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.uqbar.hoope.services.HOOPLGrammarAccess;

}

@parser::members {

 	private HOOPLGrammarAccess grammarAccess;
 	
    public InternalHOOPLParser(TokenStream input, HOOPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected HOOPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getObjectsExpresionParserRuleCall_0_0()); 
	    }
		lv_objects_0_1=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_0_1, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getObjectsObjectDefinitionParserRuleCall_0_1()); 
	    }
		lv_objects_0_2=ruleObjectDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_0_2, 
        		"ObjectDefinition");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*
;





// Entry rule entryRuleObjectDefinition
entryRuleObjectDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectDefinitionRule()); }
	 iv_ruleObjectDefinition=ruleObjectDefinition 
	 { $current=$iv_ruleObjectDefinition.current; } 
	 EOF 
;

// Rule ObjectDefinition
ruleObjectDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ref' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectDefinitionAccess().getRefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='= object {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectDefinitionAccess().getFeaturesFeatureParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getObjectDefinitionParserRuleCall_0()); 
    }
    this_ObjectDefinition_0=ruleObjectDefinition
    { 
        $current = $this_ObjectDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_1()); 
    }
    this_Property_1=ruleProperty
    { 
        $current = $this_Property_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getMessageParserRuleCall_2()); 
    }
    this_Message_2=ruleMessage
    { 
        $current = $this_Message_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypoParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Typo");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getInitialTerminalParserRuleCall_3_1_0()); 
	    }
		lv_initial_4_0=ruleTerminal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_4_0, 
        		"Terminal");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='message' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageAccess().getMessageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='= method {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageAccess().getMethodKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getSentencesExpresionParserRuleCall_3_0()); 
	    }
		lv_sentences_3_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_3_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleExpresion
entryRuleExpresion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpresionRule()); }
	 iv_ruleExpresion=ruleExpresion 
	 { $current=$iv_ruleExpresion.current; } 
	 EOF 
;

// Rule Expresion
ruleExpresion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpresionAccess().getWhileExpresionParserRuleCall_0()); 
    }
    this_WhileExpresion_0=ruleWhileExpresion
    { 
        $current = $this_WhileExpresion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpresionAccess().getIfExpresionParserRuleCall_1()); 
    }
    this_IfExpresion_1=ruleIfExpresion
    { 
        $current = $this_IfExpresion_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getExpresionAccess().getTerminalParserRuleCall_2_0()); 
    }
ruleTerminal
    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExpresionAccess().getOperatorParserRuleCall_2_1_0()); 
    }
ruleOperator
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpresionAccess().getTerminalParserRuleCall_2_1_1()); 
    }
ruleTerminal
    { 
        afterParserOrEnumRuleCall();
    }
)*))
;





// Entry rule entryRuleIfExpresion
entryRuleIfExpresion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpresionRule()); }
	 iv_ruleIfExpresion=ruleIfExpresion 
	 { $current=$iv_ruleIfExpresion.current; } 
	 EOF 
;

// Rule IfExpresion
ruleIfExpresion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExpresionAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpresionAccess().getConditionExpresionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpresionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpresionAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpresionAccess().getThenExpresionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpresionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpresionAccess().getElseKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpresionAccess().getElseExpresionParserRuleCall_4_1_0()); 
	    }
		lv_else_5_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpresionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhileExpresion
entryRuleWhileExpresion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileExpresionRule()); }
	 iv_ruleWhileExpresion=ruleWhileExpresion 
	 { $current=$iv_ruleWhileExpresion.current; } 
	 EOF 
;

// Rule WhileExpresion
ruleWhileExpresion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileExpresionAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileExpresionAccess().getConditionExpresionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileExpresionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhileExpresionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileExpresionAccess().getSentencesExpresionParserRuleCall_3_0()); 
	    }
		lv_sentences_3_0=ruleExpresion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileExpresionRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_3_0, 
        		"Expresion");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileExpresionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTerminal
entryRuleTerminal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalRule()); } 
	 iv_ruleTerminal=ruleTerminal 
	 { $current=$iv_ruleTerminal.current.getText(); }  
	 EOF 
;

// Rule Terminal
ruleTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTerminalAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getTerminalAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getTerminalAccess().getIDTerminalRuleCall_2()); 
    }

    |(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getTerminalAccess().getINTTerminalRuleCall_3_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalAccess().getFullStopFullStopKeyword_3_1()); 
    }
    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getTerminalAccess().getINTTerminalRuleCall_3_2()); 
    }
))
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_2()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getSolidusKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleTypo
entryRuleTypo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypoRule()); } 
	 iv_ruleTypo=ruleTypo 
	 { $current=$iv_ruleTypo.current.getText(); }  
	 EOF 
;

// Rule Typo
ruleTypo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Number' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypoAccess().getNumberKeyword_0()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypoAccess().getStringKeyword_1()); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypoAccess().getBooleanKeyword_2()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


