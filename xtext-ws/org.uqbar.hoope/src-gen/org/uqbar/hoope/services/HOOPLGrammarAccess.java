/*
* generated by Xtext
*/
package org.uqbar.hoope.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HOOPLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HOOPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HOOPL");
		private final RuleCall cObjectParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HOOPL:
		//	Object;
		public ParserRule getRule() { return rule; }

		//Object
		public RuleCall getObjectParserRuleCall() { return cObjectParserRuleCall; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Object:
		//	"object" name=ID "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//"object" name=ID "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Property | Operation;
		public ParserRule getRule() { return rule; }

		//Property | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Property:
		//	name=ID ("=" (INT | STRING))?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" (INT | STRING))?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" (INT | STRING))?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//INT | STRING
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_1() { return cSTRINGTerminalRuleCall_1_1_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSentenceAlternatives_3_0 = (Alternatives)cSentenceAssignment_3.eContents().get(0);
		private final RuleCall cSentenceMutatorParserRuleCall_3_0_0 = (RuleCall)cSentenceAlternatives_3_0.eContents().get(0);
		private final RuleCall cSentenceSendMessageParserRuleCall_3_0_1 = (RuleCall)cSentenceAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operation:
		//	annotations+=Annotation* name=ID "{" sentence+=(Mutator | SendMessage)* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* name=ID "{" sentence+=(Mutator | SendMessage)* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//sentence+=(Mutator | SendMessage)*
		public Assignment getSentenceAssignment_3() { return cSentenceAssignment_3; }

		//Mutator | SendMessage
		public Alternatives getSentenceAlternatives_3_0() { return cSentenceAlternatives_3_0; }

		//Mutator
		public RuleCall getSentenceMutatorParserRuleCall_3_0_0() { return cSentenceMutatorParserRuleCall_3_0_0; }

		//SendMessage
		public RuleCall getSentenceSendMessageParserRuleCall_3_0_1() { return cSentenceSendMessageParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_1_2 = (RuleCall)cAlternatives_2_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Annotation:
		//	"@" ID ("(" (INT | STRING | ID) ")")?;
		public ParserRule getRule() { return rule; }

		//"@" ID ("(" (INT | STRING | ID) ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("(" (INT | STRING | ID) ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//INT | STRING | ID
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0() { return cINTTerminalRuleCall_2_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1_1() { return cSTRINGTerminalRuleCall_2_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1_2() { return cIDTerminalRuleCall_2_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class MutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Mutator:
		//	name=ID "(" (INT | STRING | ID) ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (INT | STRING | ID) ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//INT | STRING | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SendMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SendMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameSelfKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cMessageAlternatives_1_0 = (Alternatives)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageIDTerminalRuleCall_1_0_0 = (RuleCall)cMessageAlternatives_1_0.eContents().get(0);
		private final RuleCall cMessagePrimitiveParserRuleCall_1_0_1 = (RuleCall)cMessageAlternatives_1_0.eContents().get(1);
		
		//SendMessage:
		//	name=(ID | "self") message=(ID | Primitive);
		public ParserRule getRule() { return rule; }

		//name=(ID | "self") message=(ID | Primitive)
		public Group getGroup() { return cGroup; }

		//name=(ID | "self")
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | "self"
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"self"
		public Keyword getNameSelfKeyword_0_0_1() { return cNameSelfKeyword_0_0_1; }

		//message=(ID | Primitive)
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//ID | Primitive
		public Alternatives getMessageAlternatives_1_0() { return cMessageAlternatives_1_0; }

		//ID
		public RuleCall getMessageIDTerminalRuleCall_1_0_0() { return cMessageIDTerminalRuleCall_1_0_0; }

		//Primitive
		public RuleCall getMessagePrimitiveParserRuleCall_1_0_1() { return cMessagePrimitiveParserRuleCall_1_0_1; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSubirKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBajarKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDerechaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIzquierdaKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Primitive:
		//	"subir" | "bajar" | "derecha" | "izquierda";
		public ParserRule getRule() { return rule; }

		//"subir" | "bajar" | "derecha" | "izquierda"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"subir"
		public Keyword getSubirKeyword_0() { return cSubirKeyword_0; }

		//"bajar"
		public Keyword getBajarKeyword_1() { return cBajarKeyword_1; }

		//"derecha"
		public Keyword getDerechaKeyword_2() { return cDerechaKeyword_2; }

		//"izquierda"
		public Keyword getIzquierdaKeyword_3() { return cIzquierdaKeyword_3; }
	}
	
	
	private HOOPLElements pHOOPL;
	private ObjectElements pObject;
	private FeatureElements pFeature;
	private PropertyElements pProperty;
	private OperationElements pOperation;
	private AnnotationElements pAnnotation;
	private MutatorElements pMutator;
	private SendMessageElements pSendMessage;
	private PrimitiveElements pPrimitive;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HOOPLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uqbar.hoope.HOOPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HOOPL:
	//	Object;
	public HOOPLElements getHOOPLAccess() {
		return (pHOOPL != null) ? pHOOPL : (pHOOPL = new HOOPLElements());
	}
	
	public ParserRule getHOOPLRule() {
		return getHOOPLAccess().getRule();
	}

	//Object:
	//	"object" name=ID "{" features+=Feature* "}";
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Feature:
	//	Property | Operation;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Property:
	//	name=ID ("=" (INT | STRING))?;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Operation:
	//	annotations+=Annotation* name=ID "{" sentence+=(Mutator | SendMessage)* "}";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Annotation:
	//	"@" ID ("(" (INT | STRING | ID) ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Mutator:
	//	name=ID "(" (INT | STRING | ID) ")";
	public MutatorElements getMutatorAccess() {
		return (pMutator != null) ? pMutator : (pMutator = new MutatorElements());
	}
	
	public ParserRule getMutatorRule() {
		return getMutatorAccess().getRule();
	}

	//SendMessage:
	//	name=(ID | "self") message=(ID | Primitive);
	public SendMessageElements getSendMessageAccess() {
		return (pSendMessage != null) ? pSendMessage : (pSendMessage = new SendMessageElements());
	}
	
	public ParserRule getSendMessageRule() {
		return getSendMessageAccess().getRule();
	}

	//Primitive:
	//	"subir" | "bajar" | "derecha" | "izquierda";
	public PrimitiveElements getPrimitiveAccess() {
		return (pPrimitive != null) ? pPrimitive : (pPrimitive = new PrimitiveElements());
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
