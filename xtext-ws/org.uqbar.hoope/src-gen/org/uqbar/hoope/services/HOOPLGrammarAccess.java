/*
* generated by Xtext
*/
package org.uqbar.hoope.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HOOPLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cObjectsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cObjectsAlternatives_0 = (Alternatives)cObjectsAssignment.eContents().get(0);
		private final RuleCall cObjectsExpresionParserRuleCall_0_0 = (RuleCall)cObjectsAlternatives_0.eContents().get(0);
		private final RuleCall cObjectsObjectDefinitionParserRuleCall_0_1 = (RuleCall)cObjectsAlternatives_0.eContents().get(1);
		
		//Program:
		//	objects+=(Expresion | ObjectDefinition)*;
		public ParserRule getRule() { return rule; }

		//objects+=(Expresion | ObjectDefinition)*
		public Assignment getObjectsAssignment() { return cObjectsAssignment; }

		//Expresion | ObjectDefinition
		public Alternatives getObjectsAlternatives_0() { return cObjectsAlternatives_0; }

		//Expresion
		public RuleCall getObjectsExpresionParserRuleCall_0_0() { return cObjectsExpresionParserRuleCall_0_0; }

		//ObjectDefinition
		public RuleCall getObjectsObjectDefinitionParserRuleCall_0_1() { return cObjectsObjectDefinitionParserRuleCall_0_1; }
	}

	public class ObjectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cObjectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectDefinition:
		//	"ref" name=ID "= object {" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//"ref" name=ID "= object {" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"= object {"
		public Keyword getObjectKeyword_2() { return cObjectKeyword_2; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Feature:
		//	ObjectDefinition | Property | Message;
		public ParserRule getRule() { return rule; }

		//ObjectDefinition | Property | Message
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectDefinition
		public RuleCall getObjectDefinitionParserRuleCall_0() { return cObjectDefinitionParserRuleCall_0; }

		//Property
		public RuleCall getPropertyParserRuleCall_1() { return cPropertyParserRuleCall_1; }

		//Message
		public RuleCall getMessageParserRuleCall_2() { return cMessageParserRuleCall_2; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypoParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialTerminalParserRuleCall_3_1_0 = (RuleCall)cInitialAssignment_3_1.eContents().get(0);
		
		//Property:
		//	name=ID ":" type=Typo ("=" initial=Terminal)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Typo ("=" initial=Terminal)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Typo
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Typo
		public RuleCall getTypeTypoParserRuleCall_2_0() { return cTypeTypoParserRuleCall_2_0; }

		//("=" initial=Terminal)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initial=Terminal
		public Assignment getInitialAssignment_3_1() { return cInitialAssignment_3_1; }

		//Terminal
		public RuleCall getInitialTerminalParserRuleCall_3_1_0() { return cInitialTerminalParserRuleCall_3_1_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMethodKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSentencesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentencesExpresionParserRuleCall_3_0 = (RuleCall)cSentencesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Message:
		//	"message" name=ID "= method {" sentences+=Expresion* "}";
		public ParserRule getRule() { return rule; }

		//"message" name=ID "= method {" sentences+=Expresion* "}"
		public Group getGroup() { return cGroup; }

		//"message"
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"= method {"
		public Keyword getMethodKeyword_2() { return cMethodKeyword_2; }

		//sentences+=Expresion*
		public Assignment getSentencesAssignment_3() { return cSentencesAssignment_3; }

		//Expresion
		public RuleCall getSentencesExpresionParserRuleCall_3_0() { return cSentencesExpresionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileExpresionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpresionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTerminalParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cTerminalParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//Expresion:
		//	WhileExpresion | IfExpresion | Terminal (Operator Terminal)*;
		public ParserRule getRule() { return rule; }

		//WhileExpresion | IfExpresion | Terminal (Operator Terminal)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//WhileExpresion
		public RuleCall getWhileExpresionParserRuleCall_0() { return cWhileExpresionParserRuleCall_0; }

		//IfExpresion
		public RuleCall getIfExpresionParserRuleCall_1() { return cIfExpresionParserRuleCall_1; }

		//Terminal (Operator Terminal)*
		public Group getGroup_2() { return cGroup_2; }

		//Terminal
		public RuleCall getTerminalParserRuleCall_2_0() { return cTerminalParserRuleCall_2_0; }

		//(Operator Terminal)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//Operator
		public RuleCall getOperatorParserRuleCall_2_1_0() { return cOperatorParserRuleCall_2_1_0; }

		//Terminal
		public RuleCall getTerminalParserRuleCall_2_1_1() { return cTerminalParserRuleCall_2_1_1; }
	}

	public class IfExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpresionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpresionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseExpresionParserRuleCall_4_1_0 = (RuleCall)cElseAssignment_4_1.eContents().get(0);
		
		//IfExpresion returns Expresion:
		//	"if" condition=Expresion "then" then=Expresion ("else" else=Expresion)?;
		public ParserRule getRule() { return rule; }

		//"if" condition=Expresion "then" then=Expresion ("else" else=Expresion)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=Expresion
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expresion
		public RuleCall getConditionExpresionParserRuleCall_1_0() { return cConditionExpresionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=Expresion
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Expresion
		public RuleCall getThenExpresionParserRuleCall_3_0() { return cThenExpresionParserRuleCall_3_0; }

		//(=> "else" else=Expresion)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//else=Expresion
		public Assignment getElseAssignment_4_1() { return cElseAssignment_4_1; }

		//Expresion
		public RuleCall getElseExpresionParserRuleCall_4_1_0() { return cElseExpresionParserRuleCall_4_1_0; }
	}

	public class WhileExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileExpresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpresionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSentencesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentencesExpresionParserRuleCall_3_0 = (RuleCall)cSentencesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileExpresion returns Expresion:
		//	"while" condition=Expresion "{" sentences+=Expresion* "}";
		public ParserRule getRule() { return rule; }

		//"while" condition=Expresion "{" sentences+=Expresion* "}"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//condition=Expresion
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expresion
		public RuleCall getConditionExpresionParserRuleCall_1_0() { return cConditionExpresionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//sentences+=Expresion*
		public Assignment getSentencesAssignment_3() { return cSentencesAssignment_3; }

		//Expresion
		public RuleCall getSentencesExpresionParserRuleCall_3_0() { return cSentencesExpresionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Terminal:
		//	INT | STRING | ID | INT ".." INT;
		public ParserRule getRule() { return rule; }

		//INT | STRING | ID | INT ".." INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//INT ".." INT
		public Group getGroup_3() { return cGroup_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1() { return cFullStopFullStopKeyword_3_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Operator:
		//	"+" | "-" | "*" | "/";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}

	public class TypoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Typo:
		//	"Number" | "String" | "Boolean";
		public ParserRule getRule() { return rule; }

		//"Number" | "String" | "Boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Number"
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }

		//"String"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"Boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
	}
	
	
	private ProgramElements pProgram;
	private ObjectDefinitionElements pObjectDefinition;
	private FeatureElements pFeature;
	private PropertyElements pProperty;
	private MessageElements pMessage;
	private ExpresionElements pExpresion;
	private IfExpresionElements pIfExpresion;
	private WhileExpresionElements pWhileExpresion;
	private TerminalElements pTerminal;
	private OperatorElements pOperator;
	private TypoElements pTypo;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HOOPLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uqbar.hoope.HOOPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	objects+=(Expresion | ObjectDefinition)*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//ObjectDefinition:
	//	"ref" name=ID "= object {" features+=Feature* "}";
	public ObjectDefinitionElements getObjectDefinitionAccess() {
		return (pObjectDefinition != null) ? pObjectDefinition : (pObjectDefinition = new ObjectDefinitionElements());
	}
	
	public ParserRule getObjectDefinitionRule() {
		return getObjectDefinitionAccess().getRule();
	}

	//Feature:
	//	ObjectDefinition | Property | Message;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Property:
	//	name=ID ":" type=Typo ("=" initial=Terminal)?;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Message:
	//	"message" name=ID "= method {" sentences+=Expresion* "}";
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Expresion:
	//	WhileExpresion | IfExpresion | Terminal (Operator Terminal)*;
	public ExpresionElements getExpresionAccess() {
		return (pExpresion != null) ? pExpresion : (pExpresion = new ExpresionElements());
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}

	//IfExpresion returns Expresion:
	//	"if" condition=Expresion "then" then=Expresion ("else" else=Expresion)?;
	public IfExpresionElements getIfExpresionAccess() {
		return (pIfExpresion != null) ? pIfExpresion : (pIfExpresion = new IfExpresionElements());
	}
	
	public ParserRule getIfExpresionRule() {
		return getIfExpresionAccess().getRule();
	}

	//WhileExpresion returns Expresion:
	//	"while" condition=Expresion "{" sentences+=Expresion* "}";
	public WhileExpresionElements getWhileExpresionAccess() {
		return (pWhileExpresion != null) ? pWhileExpresion : (pWhileExpresion = new WhileExpresionElements());
	}
	
	public ParserRule getWhileExpresionRule() {
		return getWhileExpresionAccess().getRule();
	}

	//Terminal:
	//	INT | STRING | ID | INT ".." INT;
	public TerminalElements getTerminalAccess() {
		return (pTerminal != null) ? pTerminal : (pTerminal = new TerminalElements());
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}

	//Operator:
	//	"+" | "-" | "*" | "/";
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Typo:
	//	"Number" | "String" | "Boolean";
	public TypoElements getTypoAccess() {
		return (pTypo != null) ? pTypo : (pTypo = new TypoElements());
	}
	
	public ParserRule getTypoRule() {
		return getTypoAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
